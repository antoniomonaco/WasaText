openapi: 3.0.3
info:
  title: WasaText Api
  description: "The api of the messaging website WasaText"
  version: 1.0.0
tags:
  - name: login
    description: "Operations for user authentication."
  - name: conversations
    description: "Operations related to conversations."
  - name: comments
    description: "Operations for managing comments."
  - name: groups
    description: "Operations for managing group chats."
  - name: users
    description: "Operations related to user management."

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      title: User
      description: "This object represents a single user in the system."
      type: object
      properties:
        id:
          description: "Unique user identifier."
          type: integer
          example: 1
          readOnly: true
        username:
          description: "Name of the user. It should be alphanumeric and can include underscores or hyphens."
          type: string
          example: "mario"
          minLength: 1
          maxLength: 255
          pattern: "^[a-zA-Z0-9_-]+$" 
        photoUrl: 
          description: "URL of the user's profile photo."
          type: string
          format: url
          minLength: 1
          maxLength: 255
          example: "https://example.com/profile-photo.jpg"
    Conversation:
      title: Conversation
      description: "This object represents a conversation between two users or a group of users."
      type: object
      properties:
        id:
          description: "Unique conversation identifier."
          type: integer
          example: 1
          readOnly: true
        type:
          description: "The type of the conversation: either an individual chat or a group chat."
          type: string
          minLength: 1
          maxLength: 255
          enum: ["chat","group"]
          example: "chat"
        participants:
          description: "The users participating in the conversation."
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: "#/components/schemas/User"
        latestMessage:
          description: "The last message sent in the conversation. It will be displayed in the conversation preview."
          allOf:
            - $ref: "#/components/schemas/Message"
        name:  # In case of a private chat it will use the name of the other user
          description: "Name of the group conversation (optional)."
          type: string
          minLength: 1
          maxLength: 255
          example: "Group of Friends"
        photoUrl:  # In case of a private chat it will use the photo of the other user
          description: "URL of the group conversation photo (optional)."
          type: string
          minLength: 1
          maxLength: 255
          format: url
          example: "https://example.com/group-photo.jpg"
    Message:
      title: Message
      description: "A message sent in a conversation."
      type: object
      properties:
        id:
          description: "Unique message identifier."
          type: integer
          example: 1
          readOnly: true
        type:
          description: "The type of the message. It can either be text or media."
          type: string
          minLength: 1
          maxLength: 255
          enum: ["text","media"]
          example: "text"
        sender:
          description: "The user who sent the message."
          allOf:
            - $ref: "#/components/schemas/User"
        timestamp:
          description: "The date and time when the message was sent."
          type: string
          minLength: 1
          maxLength: 255
          format: date-time
          example: "2024-11-13T11:40:09Z"
        status:
          description: "The status of the message, such as 'received' or 'read'."
          type: string
          minLength: 1
          maxLength: 255
          enum: ["received", "read"]
          example: "read"
      oneOf:
        - properties:
            content:
              description: "The text content of the message."
              type: string
              minLength: 1
              maxLength: 255
              pattern: "^[a-zA-Z0-9\\s\\.,!?;:()_-]*$"
              example: "This is a message."
        - properties:
            media_url:
              description: "The URL of the media content."
              type: string
              minLength: 1
              maxLength: 255
              format : url
              example: "https://example.com/image.jpg"
    Comment: 
      title: Comment
      description: "A comment on a message in a conversation."
      type: object
      properties:
        id:
          description: "Unique comment identifier."
          type: integer
          example: 1
          readOnly: true
        messageID:
          description: "ID of the message being commented on."
          type: integer
          example: 1
        content:
          description: "Text content of the comment."
          type: string
          minLength: 1
          maxLength: 255
          pattern: "^[a-zA-Z0-9\\s\\.,!?;:()_-]*$"
          example: "This is a comment."
        sender:
          description: "The user who made the comment."
          allOf:
            - $ref: "#/components/schemas/User"
        timestamp:
          description: "The date and time when the comment was made."
          type: string
          minLength: 1
          maxLength: 255
          format: date-time
          example: "2024-11-13T11:45:09Z"
  parameters:
    ConversationId:
      schema:
        type: integer
        example: 1
        readOnly: true
        description: "An integer representing the unique identifier of the conversation."
      name: conversationID
      in: path
      required: true
      description: "The unique identifier of the conversation."
    MessageId:
      schema:
        type: integer
        example: 1
        readOnly: true
        description: "An integer representing the unique identifier of the message."
      name: messageID
      in: path
      required: true
      description: "The unique identifier of the message."
    CommentId:
      schema:
        type: integer
        example: 1
        readOnly: true
        description: "An integer representing the unique identifier of the comment."
      name: commentID
      in: path
      required: true
      description: "The unique identifier of the comment."


paths:
  /session:
    post:
      tags: ["login"]
      summary: "Logs in the user or creates a new one if not existing."
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              description: "The username to be used for login or registration"
              type: object
              properties:
                name:
                  description: "The username to be used for login or registration"
                  type: string
                  example: Mario123
                  pattern: "^[a-zA-Z0-9]+$"
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: "User log-in action successful"
          content:
            application/json:
              schema:
                description: "Unique identifier for the user"
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 1
                    description: "Unique identifier for the user"
        '400':
          description: "Username not valid"

  /conversations/:
    get:
      security:
        - bearerAuth: []
      tags: ["conversations"]
      summary: "Fetch all conversations the user is part of."
      operationId: getMyConversations
      description: "Get all my conversations."
      responses:
        '200':
          description: "List of conversations"
          content:
            application/json:
              schema:
                description: "Array with all the user's conversations"
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: '#/components/schemas/Conversation'
    post:
      security:
        - bearerAuth: []
      tags: ["conversations"]
      summary: "Creates a new conversation."
      operationId: createConversation
      description: "Creates a new conversation, either a group or a private chat."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "details of the new conversation"
              type: object
              properties:
                type:
                  description: "The type of conversation to create, either a private chat or a group"
                  type: string
                  enum: ["chat", "group"]
                  example: "group"
                participants:
                  description: "List of user IDs to be included in the conversation"
                  type: array
                  minItems: 1
                  maxItems: 100
                  items:
                    type: integer # User id
                  example: [1, 2, 3]
      responses:
        '201':
          description: "Conversation created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: "Invalid request"
  /conversations/{conversationID}:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    get:
      security:
        - bearerAuth: []
      tags: ["conversations"]
      summary: "Get a specific conversation by its ID."
      operationId: getConversation
      description: "Get the conversation with the given ID."
      responses:
        "200":
          description: "Conversation and messages retrieved successfully"
          content:
            application/json:
              schema:
                description: "The details of the requested conversation"
                type: object
                properties:
                  conversation:
                    $ref: '#/components/schemas/Conversation'
                  messages:
                    description: "List of messages in the conversation"
                    type: array
                    minItems: 0
                    maxItems: 1000
                    items:
                      $ref: '#/components/schemas/Message'
        "404":
          description: "Conversation not found"
    post:
      security:
        - bearerAuth: []
      tags: ["conversations"]
      summary: "Send a message to a specific conversation."
      operationId: sendMessage
      description: "Send a message in the conversation."
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/Message"
      responses:
        "201":
          description: "Message sent successfully!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        '400':
          description: "Invalid request"
    put:
      security:
        - bearerAuth: []
      tags: ["conversations"]
      summary: "Marks all messages in the conversation as read."
      operationId: markMessagesAsRead
      description: "Marks all messages in the conversation as read."
      responses:
        "204":
          description: "Messages marked as read successfully"
        "404":
          description: "Conversation not found"

  /conversations/{conversationID}/messages/{messageID}:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
      - $ref: "#/components/parameters/MessageId"
    post:
      security:
        - bearerAuth: []
      tags: ["conversations"]
      summary: "Forward a message from one conversation to another."
      operationId: forwardMessage
      description: "Forward the given message to another conversation."
      requestBody:
        description: "ID of the conversation in which to send the message"
        required: true
        content:
          application/json:
            schema:
              description: "The ID of the conversation where the message will be forwarded"
              type: object
              properties:
                targetConversationId:
                  description: "The ID of the conversation where the message will be forwarded"
                  type: integer
                  example: 2
      responses:
        "201":
          description: "Message forwarded successfully!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        '403':
          description: "Operation not permitted"
        '404':
          description: "Message not found"
    delete:
      security:
        - bearerAuth: []
      tags: ["conversations"]
      summary: "Delete a specific message."
      operationId: deleteMessage
      description: "Deletes an existing message."
      responses:
        '204':
          description: "Message deleted successfully"
        '403':
          description: "Operation not permitted"
        '404':
          description: "Message not found"

  /conversations/{conversationID}/messages/{messageID}/comments:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
      - $ref: "#/components/parameters/MessageId"
    post:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: "Add a comment to a specific message."
      operationId: commentMessage
      description: "Add a comment to a specific message in a conversation."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "Content of the comment (emoji)"
              type: string
              example: "this is a comment"
              pattern: "^.*$"  
              minLength: 1
              maxLength: 255 
      responses:
        '201':
          description: "Comment added successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        '400':
          description: "Invalid request"
        '403':
          description: "Operation not permitted"
        '404':
          description: "Message not found"
    get:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: "Retrieve all comments for a specific message."
      operationId: getComments
      description: "Get all comments for a specific message."
      responses:
        '200':
          description: "List of comments"
          content:
            application/json:
              schema:
                description: "Array with all the comments of the specified message"
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: "#/components/schemas/Comment"
        '403':
          description: "Operation not permitted"
        '404':
          description: "Message not found"

  /conversations/{conversationID}/messages/{messageID}/comments/{commentID}:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
      - $ref: "#/components/parameters/MessageId"
      - $ref: "#/components/parameters/CommentId"
    delete:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: "Remove a specific comment from a message."
      operationId: uncommentMessage
      description: "Remove a specific comment from a message."
      responses:
        '204':
          description: "Comment deleted successfully"
        '403':
          description: "Operation not permitted"
        '404':
          description: "Comment not found"

  /conversations/{conversationID}/participants:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    post:
      security:
        - bearerAuth: []
      tags: ["groups"]
      summary: "Add a user to a group conversation."
      operationId: addToGroup
      description: "Add a user to a group conversation. This operation is valid only for group conversations."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "The ID of the user to be added to the group conversation"
              type: object
              properties:
                userId:
                  description: "The ID of the user to be added to the group conversation"
                  type: integer
                  example: 2
      responses:
        '204':
          description: "User added to group"
        '400':
          description: "Cannot add user to an individual chat"
        '404':
          description: "Conversation not found"

    delete:
      security:
        - bearerAuth: []
      tags: ["groups"]
      summary: "Remove the user from a group conversation."
      operationId: leaveGroup
      description: "Remove the user from a group conversation. This operation is valid only for group conversations."
      responses:
        '204':
          description: "Left the group successfully"
        '403':
          description: "Cannot leave an individual chat"
        '404':
          description: "Conversation not found"

  /conversations/{conversationID}/name:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    put:
      security:
        - bearerAuth: []
      tags: ["groups"]
      summary: "Set or update the group conversation name."
      operationId: setGroupName
      description: "Set or update the name of a group conversation. This operation is valid only for group conversations."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "The new name to be set for the group conversation"
              type: object
              properties:
                groupName:
                  description: "The new name to be set for the group conversation"
                  type: string
                  minLength: 1
                  maxLength: 255
                  pattern : "^.*$"
                  example: "New Group Name"
      responses:
        '204':
          description: "Group name updated successfully"
        '400':
          description: "Cannot set name for an individual chat"
        '404':
          description: "Conversation not found"

  /conversations/{conversationID}/photo:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    put:
      security:
        - bearerAuth: []
      tags: ["groups"]
      summary: "Set or update the group conversation photo."
      operationId: setGroupPhoto
      description: "Set or update the photo of a group conversation. This operation is valid only for group conversations."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "The URL of the new photo to be set for the group conversation"
              type: object
              properties:
                photoUrl:
                  description: "The URL of the new photo to be set for the group conversation"
                  type: string
                  minLength: 1
                  maxLength: 255
                  format : url
                  example: "https://example.com/group-photo.jpg"
      responses:
        '204':
          description: "Group photo updated successfully"
        '400':
          description: "Cannot set photo for an individual chat"
        '404':
          description: "Conversation not found"

  /users/:
    get:
      security:
        - bearerAuth: []
      tags: ["users"]
      summary: "Search for users in the system."
      operationId: searchUsers
      description: "Search for users. If a name is provided, it searches for that specific user; otherwise, it returns all users."
      parameters:
        - name : username # es. /users/?username=mario
          in: query
          required: false
          description: "Search for a user by name."
          schema:
            description: "name of the user to search for"
            type: string
            minLength: 1
            maxLength: 255
            pattern: "^[a-zA-Z0-9_-]+$"
            example: "mario"
      responses:
        '200':
          description: "List of users"
          content:
            application/json:
              schema:
                description: "Array with all the users found"
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: '#/components/schemas/User'
        '404': 
          description : "No users found"
  /users/me:
    get:
      security:
        - bearerAuth: []
      tags: ["users"]
      summary: "Get the current user's profile information"
      description: "Retrieve the profile details of the currently authenticated user"
      operationId: getMyInformation
      responses:
        '200':
          description: "User profile retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: "Unauthorized - Authentication token is missing or invalid"
  /users/me/name:
    put:
      security:
        - bearerAuth: []
      tags: ["users"]
      summary: "Set or update the name of the current user"
      description: "This operation allows the current user to set or update their name."
      operationId: setMyUserName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "new name for the user"
              type: string
              example: "mario"
              minLength: 1
              maxLength: 255
              pattern: "^[a-zA-Z0-9_-]+$"
      responses:
        '204':
          description: "Name updated successfully"

  /users/me/photo:
    put:
      security:
        - bearerAuth: []
      tags: ["users"]
      summary: "Set or update the profile photo of the current user."
      description: "This operation allows the current user to set or update their profile photo."
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "url of the profile picture"
              type: string
              minLength: 1
              maxLength: 255
              format: url
              pattern : "^.*$"
              example: "https://example.com/profile-photo.jpg"
      responses:
        '204':
          description: "Profile photo updated successfully"
